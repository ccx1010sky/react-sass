{"version":3,"sources":["component/Header.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","class","src","alt","href","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAkDeA,MAhDf,WACE,OAEE,yBAAKC,UAAU,UAIb,yBAAKC,MAAM,YAET,yBAAKA,MAAM,aACX,yBAAKA,MAAM,aACX,yBAAKA,MAAM,cAGb,yBAAKA,MAAM,QACT,yBAAKA,MAAM,iBACT,yBAAKA,MAAM,gBACT,yBAAKC,IAAI,GAAGC,IAAI,QAKtB,4BACE,wBAAIF,MAAM,YACR,uBAAGG,KAAK,IAAIH,MAAM,YAAlB,SAIF,wBAAIA,MAAM,YACR,uBAAGG,KAAK,cAAcH,MAAM,YAA5B,aAIF,wBAAIA,MAAM,YACR,uBAAGG,KAAK,aAAaH,MAAM,YAA3B,YAIF,wBAAIA,MAAM,YACR,uBAAGG,KAAK,gBAAgBH,MAAM,YAA9B,uBCPKI,MAhCf,WACE,OACE,yBAAKL,UAAU,QAEb,wBAAIC,MAAM,cAAV,OAEE,0BAAMA,MAAM,kBAAZ,QAGF,wBAAIA,MAAM,cAAV,0BAIA,yBAAKA,MAAM,SACT,uBAAGG,KAAK,MACN,uBAAGH,MAAM,0BAEX,uBAAGG,KAAK,MACN,uBAAGH,MAAM,2BAEX,uBAAGG,KAAK,MACN,uBAAGH,MAAM,2BAEX,uBAAGG,KAAK,MACN,uBAAGH,MAAM,4BCXJK,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.83da60d1.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    \n    <div className=\"Header\">\n\n      \n\n      <div class=\"menu-btn\">\n        \n        <div class=\"btn-line\"></div>\n        <div class=\"btn-line\"></div>\n        <div class=\"btn-line\"></div>\n      </div>\n\n      <div class=\"menu\">\n        <div class=\"menu-branding\">\n          <div class=\"img-portrait\">\n            <img src=\"\" alt=\"\" />\n          </div>\n        </div>\n      </div>\n\n      <ul>\n        <li class=\"nav-item\">\n          <a href=\"/\" class=\"nav-link\">\n            Home\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a href=\"/about.html\" class=\"nav-link\">\n            About Me\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a href=\"/work.html\" class=\"nav-link\">\n            My Work\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a href=\"/contact.html\" class=\"nav-link\">\n            How To Reach Me\n          </a>\n        </li>\n      </ul>\n\n    </div>\n  );\n}\nexport default Header;\n","import React from \"react\";\n\nfunction Main() {\n  return (\n    <div className=\"Main\">\n\n      <h1 class=\"lg-heading\">\n        Some\n        <span class=\"text-secondary\">One</span>\n      </h1>\n\n      <h2 class=\"sm-heading\">\n        Web Developer,Designer\n      </h2>\n\n      <div class=\"icons\">\n        <a href=\"#!\">\n          <i class=\"fab fa-twitter fa-2x\"></i>\n        </a>\n        <a href=\"#!\">\n          <i class=\"fab fa-facebook fa-2x\"></i>\n        </a>\n        <a href=\"#!\">\n          <i class=\"fab fa-linkedin fa-2x\"></i>\n        </a>\n        <a href=\"#!\">\n          <i class=\"fab fa-github fa-2x\"></i>\n        </a>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport Header from \"./component/Header\";\nimport Main from \"./component/Main\";\n//import logo from \"./logo.svg\";\n//import \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Header />, document.getElementById('head'));\n//ReactDOM.render(<Main />, document.getElementById('main'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}